{"pages":[{"title":"","text":"关于目录 _posts文件夹存放网站的文章,assets用于存放网站的资源 网站中某些图片资源主要存放在assets文件夹中,比如配置文件_config.icarus.yml中的支付宝二维码就存放在这里,使用方式/assets/img/alipay.jpg,从assets开始写 对于_posts文件夹中的内容,md格式文件后面会渲染成单独的文章,与md文件同名的文件夹中存放的文章中所使用的图片,直接写文件名就是在这个文件夹下图片 123456-- 以上需要修改设置-- _config.ymlpost_asset_folder: truemarked: prependRoot: true postAsset: true 参考内容:hexo资源文件夹","link":"/readme.html"}],"posts":[{"title":"使用Hexo搭建博客","text":"准备工作 需要安装的软件 node.js和git 使用npm安装hexo和一些插件,参考文档https://hexo.io/zh-cn/docs/ 安装方式:在安装node.js之后在控制台直接输入npm install [packname]) 需要安装的内容: hexo hexo-deployer-git hexo-toc 比如说需要安装hexo就npm install hexo,其余以此类推 hexo-deployer-git 用于生成文件直接同步到你的库中 hexo-toc 是提供toc支持markdown文本的toc支持(可以不装) 准备两个库,一个存放对应的blog文件,另外一个存放生成好的网页文件 注意:存放网页文件的库命名固定为&lt;你的 GitHub 用户名&gt;.github.io 后续你的博客打开链接为https://&lt;你的 GitHub 用户名&gt;.github.io/ 比如说你用户名是tom,那么库名就是tom.github.io,最后的博客链接就是https://tom.github.io/ 安装Hexo 将blog那个库和本地同步并且绑定,然后在blog文件夹中用控制台执行hexo init &lt;文件夹名&gt; 初始化 打开cmd,然后用cd命令切换到对应的目录,然后再hexo init啥的,后续一样的 初始化之后会有一堆配置文件,找到其中的_config.yml并且打开(vscode啥都行),然后更改其中的内容 具体参考:https://hexo.io/zh-cn/docs/configuration 像Site那块就是网页的配置,title,author什么的随便改就行,具体要说明的是下面这个deploy deploy是关于网页部署的配置,为了方便说明假设你用户名是tom,那么修改后配置如下 1234deploy:type: gitrepo: https://github.com/tom/tom.github.io.gitbranch: main 关于deploy的几点说明 type 现在使用git,之前使用的github, repo 就是之前提到的那个固定格式的库的完整地址(也就是后面记得加.git) branch 表示那个库的分支,之前默认分支是master,现在默认是main(也可以自己调整) 增加新的博客(如果不想加直接跳转到4) 使用控制台直接hexo new 新文件名,然后到目录下的source\\_post中找到对应的md文件编辑即可,使用markdown语法编辑 具体markdown语法可参考http://www.markdown.cn/ 不使用hexo new直接去对应目录创建文件夹和文件也是可以的 生成网页 编辑好设置和博客后,使用hexo g和hexo s来生成可供本地预览的版本 成功后会给出一个链接http://localhost:4000/直接复制到浏览器中打开即可看到 如果有出现问题根据具体问题修改. 提交到github 这里需要安装hexo-deployer-git 使用hexo clean 和hexo deploy命令,成功了就可以尝试打开之前提到的链接https://tom.github.io/ 至于本地的库另外同步到github就可以了(不影响链接的打开) blog更新hexo命令详细介绍参考 https://hexo.io/zh-cn/docs/commands.html hexo new &lt;文件名&gt; 新增一篇文章(默认在source\\_post文件夹中) hexo g 生成静态文件 hexo s 启动服务器(搭配上面的使用,使用http://localhost:4000/预览效果) hexo clean 清理缓存和静态文件(搭配下面的hexo deploy一起用) hexo deploy 生成对应的网页文件并且推送到github git命令 git clone &lt;github链接&gt; 将一个库克隆到本地 参考教程 https://erik-ly.blog.csdn.net/article/details/102925267 https://zhuanlan.zhihu.com/p/26625249 工具 VScode(管理git项目) Typore(markdown编辑器) 博客美化icarus主题 链接:icarus 安装方式 使用git bash,输入如下命令git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus,将下载的源码放到themes目录下 在hexo文件夹下使用npm安装 npm install -S hexo-theme-icarus 直接从github仓库中下载源码并且解压放入到hexo的themes目录下 配置修改 设置主题(以下几种方案任选其一) 直接修改hexo目录下的_config.yml文件,将其中的theme设置为icarus 使用hexo命令修改hexo config theme icarus 设置icarus皮肤, 当前支持default或者cyberpunk两种 123456789101112131415161718192021222324252627# 注意了,这个文件需要第一次生成网页的时候才会有,请设置好主题之后重新生成下网页,再到hexo目录寻找这个文件# 主题,可以使用`default`或者'cyberpunk`variant: default# 网站log,后面是网站的图标目录地址,如果不想使用图片,可以使用后面的第二种方式log: /img/logo.svg# 方式2# log:# text: 学习笔记# 导航栏设置navbar: # 导航栏菜单项 menu: 主页: / 存档: /archives 分类: /categories 标签: /tags 关于: /about # 上面左边的文字对应的是页面上方菜单栏中的文本,右边的/archivers是hexo/public目录下的文件夹 # 导航栏右侧的链接 links: GitHub: 'https://github.com' Download on GitHub: icon: fab fa-github url: 'https://github.com/ppoffice/hexo-theme-icarus' 其他插件什么的主要参考icarus文档为主 其他主题 Hexo主题网站:https://hexo.io/themes/ Meadow:https://garybear.cn/hexo-theme-meadow/#/","link":"/2022/01/17/hexo_build/"},{"title":"工具整理","text":"1.网页篇1. 工具合集 工具123网http://www.gjw123.com/:各种生活小工具合集 在线工具https://tool.lu/:各种程序员小工具 alternativetohttps://alternativeto.net/:付费软件替代品搜索 2. 电子书 IT熊猫https://www.itpanda.net/book/:编程类电子书 kindle吧https://www.kindle8.cc/:epub+mobi+azw3格式电子书下载 3. 网盘搜索 云盘狗http://www.yunpangou.com/:百度云搜索引擎 2.电脑软件篇3.手机软件篇 一个木函 (安卓)万能工具箱 熊掌记 (IOS)好用的手机markdown工具 4.chrome插件","link":"/2021/02/21/%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"},{"title":"MySQL学习笔记03_SQL语句","text":"数据库执行的所有工作都由SQL语句完成,可以分成DML和DDL两种 DML 数据操作语言(Data Manipulation Language)主要是对数据的增删查改(最常用的操作是查询) 指令 作用 select 从数据库中查询数据 update 更新数据表 delete 从数据表中删除数据 insert into 插入数据 DDL 数据定义语言 (Data Definition Language)主要是创造和删除表格,也可以定义索引,构建表和表之间的联系,添加表之间的约束(一般是数据库管理员做的操作) 语句 作用 create database 创建新的数据库 alter database 修改数据库 create table 创建新的表 alter table 修改数据库表 drop table 删除数据库表 create index 创建索引 drop index 删除索引 备注注释方式不同数据库的注释方式可能有些区别,这里只介绍两种,不过多展开 12345-- 单行注释方式,注释内容放到两个横杠后面/*多行注释方式,注释内容放到斜杠星星中间这种注释方式可以跨任意行也能放到任意位置*/ 关于大小写sql对大小写并不敏感,也就是说,英文字符的大小写并不影响语句内容 123-- 以下两句并没有什么区别select * from PersonsSELECT * FROM Persons","link":"/2022/01/10/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/"},{"title":"MySQL学习笔记02_MySQL安装教程","text":"MySQL的安装教程待补齐","link":"/2022/01/10/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"},{"title":"MySQL学习笔记01_基本概念","text":"引言程序,是指令和数据的集合.除了对数据进行运算之外,数据的存储和管理也事关重要.学习编程的过程中,数据的存储主要有两种方式,内存和文件.对于一些只是临时使用的数据,我们可以定义一个变量存储起来,用完之后内存回收数据也就随之消失,对于一些需要长期使用的数据,我们可以将其写入文件,以供后续操作.但是如果需要长期保存和使用的数据太多,简单的文件操作已经不能满足需求,查询和操作的效率底,多个进程同时操作的时候容易引发各种问题,这些问题并不能通过程序本身解决.于是,便有了数据库. 数据库数据库主要用来存储和管理数据,相对于其他数据存储方式(内存/文件),有如下优点: 数据共享 减少数据冗余(每个应用不需要单独存放数据) 数据独立 数据集中管理 数据一致性 故障处理(遇到异常处理) 目前一般采用关系型数据库管理系统(RDBMS)来存储并管理海量数据 部分常用的数据库 MySQL 开源免费 关系型数据库管理系统 SQL Server 微软开发 关系型数据库管理系统 一般用于web存储数据 Oracle 世界使用最广泛之一 Sybase 开放 高性能 DB2 IBM开发 主要用于大型应用 关系型数据库和非关系型数据库 关系型数据库 由二维表的形式存放数据(可以用SQL查询语句) 非关系型数据库(NoSQL) 存储格式灵活(不支持SQL查询语句) 数据库表关系型数据库以二维表方式存放数据,一个数据库中通常包含一个或者多个表 Persons ID 姓名 年龄 城市 1 张三 19 武汉 2 李四 18 北京 3 王五 20 广州 上述表格Persons中包含三条记录,和四列(id 姓名 年龄和城市) 部分关于数据库的术语 数据库(DataBase) 带有相关数据的表的集合 表(table) 带有数据的矩阵 行(Row) 一组相关数据,也叫元组,项或者记录,比如说(1,’张三’,19,’武汉’)就是一组数据(一行) 列(Column) 每一列都包含着相同类型的数据,比如说姓名这一列 SQL(Structured Query Language) 访问标准数据库的标准计算机语言 部分关于学习数据库的教程SQL语法对于不同的SQL数据库可能有各自的私有拓展,但是都支持SQL标准","link":"/2022/01/10/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"},{"title":"MySQL学习笔记04_DML语句","text":"Persons id name age city 1 张三 19 武汉 2 李四 18 北京 3 王五 20 广州 4 赵六 22 北京 5 孙七 20 武汉 select作用: 从表格中选取数据,结果放入结果表(也称作结果集) 1234567-- 使用格式 select 列名 from 表名-- 如果需要查询多列的话,那么需要用逗号隔开select id,name from Persons-- 如果需要查询所有列的话,可以直接使用*select * from Persons select id,name from Persons这个查询得到的结果集如下 id name 1 张三 2 李四 3 王五 4 赵六 5 孙七 distinct查询过程中如果想要去除重复值,使用distinct 1234-- 使用格式 select distinct 列名 from 表名-- 查询所有人员的城市select distinct city from Persons where用于有条件在表中选取数据 1234567891011-- 使用格式 select 列名 from 表名 where 条件-- 查询表中年龄为20的人员数据select * from Persons where age = 20-- 如果有多个条件使用and和or连接-- 查询所有年龄大于18小于23的人员数据select * from Persons where age &gt;18 and age &lt;23-- 如果比较的依据不是数值类型(比如说城市是不是在武汉),字符串类型的话需要用单引号括起来(大部分用双引号也是可以的)select * from Persons where city = '武汉' 下面这些是可以在where子句中使用的操作符 操作符 作用 = 等于 &lt;&gt; 不等于,有些SQL中可以写成!= &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 between 在某个范围内 like 搜索某种模式 between指定范围 12345-- 查询所有年龄在18到23之间的人员数据select * from Persons where age between 18 and 23 -- 其实就相当于 age &gt;=18 and age &lt;=23-- 如果想要查询年龄不在18到23这个区间的人员数据,可以使用notselect * from Persons where age not between 18 and 23 like用来查找指定条件的语句(匹配字符串) 1234567-- 查询所有名字为N开头的人员数据select * from Persons where name like 'N%'/*上面的'N%'中,单引号是因为字符串要用单引号括起来,N%中的%是通配符,表示任意个字符意思是N后面加上任意个字符都是可以匹配上的,比如'Nick' 'Ni',但是'LNi'这种就不会匹配*/ 通配符 作用 示例 % 替换一个或者多个字符 %lon% _ 替换一个字符 _uck [字符表] 表示表中的任意一个字符 [lf]uck [^字符表]或者[!字符表] 表示不在表中的任意一个字符 [!123]或者[^123] in允许查找的时候指定多个值 12345-- 使用格式 select 列名 from 表名 where 列名 in (value1,value2)-- 多个匹配值用逗号隔开,支持字符串和数值类型-- 查询所有在长沙和武汉的人员数据select * from Persons where city in ('长沙','武汉') top规定需要返回的语句条目数,不同数据库系统不一定支持top 12345678910111213141516-- SQL Server-- 格式 select top number|percent 列名 from 表名-- 选取最前面的50条数据select top 50 * from Persons-- 选取前50%数据select top 50 percent * from Persons-- MySQL-- 格式 select 列名 from 表名 limit number-- 选取前50条数据select * from Persons limit 50-- Oracle-- 格式 select 列名 from 表名 where rownum &lt;= number-- 选取前50条数据select * from Persons where rownum &lt;= 50 insert into用于在指定表格中插入一条数据 123456-- 格式 insert into 表名(列1,列2,列3) value(值1,值2,值3)-- 如果是一条完整的数据,那么注意value后面的几个值要和表中的字段一一对应,表名后面可以省略列名insert into Persons value(20,'赵六',17,'长沙')-- 如果不是一条完整的数据,那么在表名后面加上你要插入的列名,value后面的几个值和列名一一对应insert into Persons(id,name) value(21,'孙七') update用于更新表中的数据 123456789101112131415-- 格式 update 表名 set 列名 = 新值 where 条件-- 可以同时修改多个数据,只需要用逗号隔开就行update Persons set age = 17,city = '武汉' where name ='孙七'-- 这里语句开始变长了,为了好看其实可以考虑多写几行,比如说update Personsset age = 17,city = '武汉'where name = '孙七'-- 特别注意下后面的where子句,update会更新所有满足条件的行-- 上面例子是修改所有叫做孙七的年龄和城市,如果表中有多个孙七,那么所有孙七的数据都会被修改-- 如果不写where子句,比如下面这种,会修改整个表的所有行update Personsset age = 17 delete用于删除表中的记录 12345678-- 格式 delete from 表名 where 条件-- 删除表中所有名为孙七的人员数据delete from Persons where name = '孙七'-- 删除表中所有数据delete * from Personsdelete from Persons","link":"/2022/01/11/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/"},{"title":"MySQL学习笔记05_DDL语句","text":"create database12345678910111213141516171819/*create database 用于创建数据库格式 create database 数据库名*/-- 创建一个名为myDB的数据库create database myDB-- 注意一点,MySQL不允许在同一系统下创建两个相同名字的数据库-- 可以使用if not exists来避免创建同名数据库的时候报错的问题create database if not exists myDB-- 创建数据库时候指定字符集和校对规则-- 默认字符集 utf8-- 默认校对规则 utf8_chiness_ci 简体中文,不区分大小写create database if not exists myDBdefault character set utf8default collate utf8_chiness_ci alter database1234567-- alter database 用于修改已经创建或者存在的数据库的相关参数(字符集/校对规则)/*格式alter database 数据库名default character set 新字符集 default collate 新校对规则*/ drop database1234567891011-- drop database 用于删除数据库(会删除整个数据库中的表和全部数据)/*drop database 数据库名可以搭配if exists使用,防止当数据库不存在的时候存在报错drop database if exists 数据库名*//*MySQL安装之后会自动创建`information_schema`和`mysql`两个系统数据库,删除之后MySQL会无法正常工作*/ use123-- MySQL中,use语句用来完成一个数据库到另外一个数据库的跳转-- 格式 use 数据库名-- 在使用数据库之前必须确定是哪个数据库","link":"/2022/02/14/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/"},{"title":"MySQL学习笔记06_表的创建","text":"create table12345678910111213141516-- 基础格式/*create table if not exists 表名( 列1 类型1, 列2 类型2, 列3 类型3 约束1 约束2 约束3 ...., -- 附带约束 ...)*/create table if not exists Persons( ID int, 姓名 varchar(20), 年龄 tinyint, 城市 varchar(20)) 约束 约束即为表中数据的限制条件,目的是为了确保表中的记录完整有效,可以分为表级约束和列级约束(针对某一个字段) 表级约束 对多个数据列建立的约束,只能在列定后声明 列级约束 对单个数据列建立的约束,可以在列定义的时候声明,也可以在列定义后声明 非空约束 not null 用not null 约束的字段不能为null值,必须给定具体的数据(插入数据的时候不指定值会报错) 1234567-- 格式 字段名 数据类型 not nullcreate table if not exists Persons( ID int, 姓名 varchar(20) not null, -- 非空约束 年龄 tinyint, 城市 varchar(20)) 唯一性约束 unique 用unique 约束的字段具有唯一性,不可以重复,可以为null 12345678910111213141516171819create table if not exists User( ID int, name varchar(20), age tinyint, city varchar(20), email varchar(20) unique, -- 唯一约束,邮箱不可以重复,插入重复的会报错)create table if not exists User( ID int, name varchar(20), age tinyint, city varchar(20), email varchar(20), phone varchar(20), unique(email,phone) -- 联合约束,两个或者两个以上的字段和另外一个记录相同则报错,一个手机号两个不同的邮箱可以)phone varchar(20) not null unique -- 非空 不能重复 主键约束 primary key 为了便于快速查找表中的数据,一般会在表中设定一个主键 每个表只能定义一个主键 主键作为每一列的唯一标识,不可为null也不能重复 可以设置表中的一个字段为主键,也可以设定多个字段为主键(联合主键) 使用多个字段为主键的时候,需要遵循最小化原则(字段尽可能少且不重复) 123456789101112131415161718192021222324252627282930313233343536373839-- 格式 字段名 数据类型 primary key-- 或者在定义所有字段之后单独指定主键 constraint 约束名 primary key(字段名)create table if not exists User( ID int primary key, -- 定义的时候设定主键 name varchar(20), age tinyint, city varchar(20), email varchar(20), phone varchar(20))create table if not exists User( ID int, name varchar(20), age tinyint, city varchar(20), email varchar(20), phone varchar(20), primary key(name),-- 定义之后设定主键,如果是联合主键的话就在这里列出来 -- constraint pri_key primary key(ID) -- 这种是给约束起个别名后续方便操作)-- 创建表后设定主键(注意表里面这个字段不能有null值)-- alter table 表名 add primary key(字段名)-- 删除主键-- alter table 表名 drop primary key-- 当主键定义为自动增长之后,这个主键的值就不在需要用户输入,每增长一条记录,主键会自动进行增长-- 给字段添加auto_increment属性来实现自动增长-- ID int primary key auto_increment-- auto_increment -- 默认初始值为1,每次加新记录,字段值自动加1-- 插入的第一条数据如果赋了初始值,那么就从这个初始值开始-- 约束的字段只能是整数类型,且必须具备not null属性-- 如果超过字段数据类型的上限,auto_increment会失效-- 一个表中只能有一个字段使用auto_increment约束,且该字段必须有唯一索引(主键或者主键的一部分) 外键约束 foreign key 外键约束用于建立主表和从表的关联关系,约束两个表中数据的一致性和完整性 主表删除某条记录的时候,从表与之对应的记录也应该有相应的变化 一个表可以有一个或者多个外键,外键不可以为空值 学号 姓名 班级 年龄 联系方式 班主任 班主任联系方式 上面这个学生表中,不难注意到,通过班级就可以确定班主任和班主任的联系方式,如果不进行拆分,会产生很多数据冗余,所以从上面这个表中只留下一个班级,另外加一个新的表来存放班主任的信息 学号 姓名 班级 年龄 联系方式 班级 班主任 班主任联系方式 拆分出学生表和班主任两个表,通过学生的班级这个字段,可以从班主任表中取到对应的班主任数据. 123456789101112131415161718192021222324252627282930313233343536373839-- 外键格式-- foreign key (字段名) references &lt;主表名&gt; (主键列名)-- 创建学生表create table if not exists students( ID int primary key, name varchar(20), class int, age tinyint, phone varchar(20))-- 创建班主任表create table if not exists class( classId int primary key, htname varchar(20), phone varchar(20), foreign key (classId) references students(class) -- 表示class表中的classId字段依赖于student表中的class字段)-- 如果创建表之后在添加外键,那么可以使用alter tablealter table class add foregin key (classId) references student(class)-- 删除外键-- 使用constraint给外键取别名的话,后续删除会简单一点alter table class add constraint classForStudent foregin key (classId) references student(class)-- 上面的外键名字叫做classForStudent 那么后续删除的时候可以alter table class drop foregin key classForStudent-- 如果创建的时候没有取别名,那么使用show create table来查看这个表结构-- 找到mysql随机给外键取的别名之后再操作-- show create table class/*注意事项:1. 创建数据表的时候,先创建主表,然后创建子表2. 添加数据的时候先向主表中添加数据,然后向子表中添加记录,删除顺序相反3. 修改数据一般通过触发器来实现*/ 检查约束 check123456789101112131415161718-- 检查约束用于限制数据-- 字段名 类型 check &lt;表达式&gt;create table if not exists student( ID int primary key, age int check(age&gt;0 and age &lt;150) -- 如果插入的数据不满足条件会插入失败)-- check约束可以放定义字段后面也可以定义之后再创建create table if not exists student( ID int primary key, age int, constrain ageLimit check(age &gt; 0 and age &lt;150) -- 这里起了一个别名叫做ageLimit)-- 定义之后用alter atble 也可以alter table student add constrain ageLimit check ( age &gt; 0)alter table student drop constraint ageLimit 默认约束 default1234567891011121314-- 如果没有规定其他的值,那么会将默认值添加到所有的新纪录-- 字段名 类型 default 默认值create table if not exists student( ID int primary key, age int, city varchar(50) default 'wuhan' -- 插入的新数据如果没有city字段那么使用默认值填充)-- 创建表之后添加default约束alter table student alter city set default 'wuhan'-- 撤销default约束alter table student alter city drop default 自动增长 auto_increment1234create table if not exists student( id int primary key auto_increment, -- 默认从1开始,每次插入一条数据自动+1 name varchar(20) not null,) 查看数据表的结构describe123-- describe/desc 用来查看表的字段信息describe 表名desc 表名 Field Type Null Key Default Extra Null 表示该列是否可以存储NULL值 Key 表示该列是否有索引 PRI表示该列是主键的一部分,UNI表示该列是UNIQUE索引的一部分,MUL表示某个给定值允许出现多次 Default 表示该列是否有默认值 Extra 表示可以获取到给定列的附加信息,比如auto_increment show create table12-- show create table 可以查看创建表时候的详细语句,还能查看存储引擎和字符编码show create table 表名 修改表的结构修改表名1alter table 旧表名 rename 新表名 修改数据类型1alter table 表名 modify 字段名 新类型 修改字段名1alter table 表名 change 旧字段名 新字段名 新数据类型 添加字段1alter table 表名 add 新字段名 数据类型 删除字段1alter table 表名 drop 字段名","link":"/2022/03/30/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006/"}],"tags":[{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"}],"categories":[]}